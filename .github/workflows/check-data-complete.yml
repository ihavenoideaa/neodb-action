name: Check NeoDB Data Struct

on:
  workflow_dispatch:
  repository_dispatch:
    types: [check-neodb-data-struct]

jobs:
  douban:
    name: Check Data struct
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Backup Old Data
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        BACKUP_FILE="data/backup/result_check_struct_$TIMESTAMP.json"
        TARGET_FILE="data/result.json"
        
        if [[ -f "$TARGET_FILE" ]]; then
          cp -f $TARGET_FILE $BACKUP_FILE
          echo "Backed up old data to $BACKUP_FILE"
        else
          echo "There is no old data."
        fi
 
    - name: Check Detail Data
      id: handel-json
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const fs = require('fs');

          const targetFilePath = "data/movie.json";
          const resultFilePath = "data/result.json";


          let movieJson;
          try {
            const data = fs.readFileSync(targetFilePath, 'utf8');
            movieJson = JSON.parse(data);
          } catch (error) {
            console.error('Error reading JSON file:', error);
            core.setFailed('Failed to read JSON file');
          }

          let resultData = [];
          try {
            if (fs.existsSync(resultFilePath)) {
              resultData = fs.readFileSync(resultFilePath, 'utf8');
              resultData = JSON.parse(resultData).data;
              
              for (const dataItem of resultData) {
                const hasExtrRes = 'external_resources' in dataItem;
                if(!hasExtrRes) {
                  console.log(`${dataItem.title}中属性不存在, 现在添加`);
                  const postId = dataItem.post_id;
                  const targetItem = movieJson.data.find(item => item.post_id === postId);
                  if(targetItem) {
                    dataItem.external_resources = targetItem.item.external_resources;
                  }
                }
              }
            }
            resultData.sort((a, b) => new Date(b.created_time) - new Date(a.created_time));

            fs.writeFileSync(resultFilePath, JSON.stringify({ data: resultData }));
            console.log(`Data saved to ${resultFilePath}`);
          } catch (readError) {
            console.error('Error reading result.json:', readError);
          }

    # 把修改后的数据提交到 GitHub 仓库
    - name: Git Add and Commit
      uses: EndBug/add-and-commit@v9
      with:
        message: 'chore(data): update neodb data'
        committer_name: 'github-actions[bot]'
        committer_email: 'github-actions[bot]@users.noreply.github.com'
        add: |
          './data'
