name: Sync NeoDB Data

on:
#  schedule:
  # every monday
#    - cron: "0 9 * * 1"
  # watch:
  #   types: [started]

  workflow_dispatch:
  repository_dispatch:
    types: [sync-neodb]

jobs:
  douban:
    name: Sync NeoDB Data
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 检查是否安装了 JQ
    - name: Check JQ
      run: |
        if ! command -v jq &> /dev/null; then
          echo "jq is not installed. Installing..."
          sudo apt-get update
          sudo apt-get install -y jq
        else
          echo "jq is already installed."
        fi
        # 把当前目录保存到环境变量中
        echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV

    # 获取本地现有文件中最新的 UUID
    - name: Get Local Current UUID
      run: |
        CURRENT_UUID() {
          jq -r '.data[0].item.uuid' /data/movie.json
        }
        echo "CURRENT_UUID=$(CURRENT_UUID)" >> $GITHUB_ENV

    # 获取远程最新的 UUID
    - name: Get NeoDB Latest UUID and Pages
      run: |
        RESPONSE=$(curl -s -X 'GET' \
          '${{ variables.NEODB_URL }}/api/me/shelf/complete?page=1' \
          -H 'accept: application/json' \
          -H 'Authorization: Bearer ${{ secrets.NEODB_ACCESS_TOKEN }}')

        REMOTE_UUID=$(echo "$RESPONSE" | jq -r '.data[0].item.uuid')
        REMOTE_PAGES=$(echo "$RESPONSE" | jq -r '.pages')

        echo "REMOTE_UUID=$REMOTE_UUID" >> $GITHUB_ENV
        echo "REMOTE_PAGES=$REMOTE_PAGES" >> $GITHUB_ENV

    # 对比本地的 UUID 和远程 UUID，相等就跳过，不相等就下载新数据
    - name: UUID Compare
      run: |
        if [ ${{ env.REMOTE_UUID }} != ${{ env.CURRENT_UUID }} ]; then
          echo "Variables are not equal. Running the next steps."
        else
          echo "Variables are equal. Skipping the next steps."
          exit 0
        fi

     # 备份旧文件并保持最多 10 份备份
    - name: Backup Old Data
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        BACKUP_FILE="${{ env.WORK_DIR }}/data/backup/movie_$TIMESTAMP.json"

        cp ${{ env.WORK_DIR }}/data/movie.json $BACKUP_FILE

        echo "Backed up old data to $BACKUP_FILE"

        # 检查备份文件数量
        BACKUP_COUNT=$(ls -1 ${{ env.WORK_DIR }}/data/movie_*.json 2>/dev/null | wc -l)
        if [ $BACKUP_COUNT -gt ${{ BACKUP_MAX_COUNT }} ]; then

          # 计算需要删除的文件数量
          NUM_TO_DELETE=$((BACKUP_COUNT - ${{ BACKUP_MAX_COUNT }}))

          # 获取最早的备份文件列表
          FILES_TO_DELETE=$(ls -1t ${{ env.WORK_DIR }}/data/movie_*.json | tail -n $NUM_TO_DELETE)
          for file in $FILES_TO_DELETE; do
            rm $file
            echo "Deleted old backup: $file"
          done
        fi

    # 下载所有数据
    - name: Get All NeoDB
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        pages=${{ env.REMOTE_PAGES }}

        # 下载数据
        for ((i=1; i<=$pages; i++)); do
          url="${{ variables.NEODB_URL }}/api/me/shelf/complete?page=$i"
          filename="movie$i.json"

          # 下载文件并保存为对应的文件名
          curl -X 'GET' "$url" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer ${{ secrets.NEODB_ACCESS_TOKEN }}' > "$filename"
        done

        # 把所有数据合并成一个文件
        jq -c -s '{data: map(.data[]) | unique | sort_by(.created_time) | reverse, pages: map(.pages)[0], count: map(.count)[0]}' *.json > movie.json

        # 更新 NeoDB 数据
        cp -f movie.json ${{ env.WORK_DIR }}/data/

    #数据处理
    - name: Get Detail Data
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        # 读取本地的 movie.json 文件内容
        # 遍历data[]
        jq -c '.data[]' data/movie.json | while read line; do
          detial_api=${{ variables.NEODB_URL }}$(echo $line | jq -r '.item.api_url');
          
          respone=$(curl -s $detial_api)

          language=$(echo $respone | jq -r '.language' );
          year=$(echo $respone | jq -r '.year' );
          echo $line | jq -c '{title: .item.title, type: .item.type, cover_image_url: .item.cover_image_url, language: $language, year: $year, rating: .item.rating, url: .item.url, external_resources: .item.external_resources, created_time: .created_time, comment_text: .comment_text, rating_grade: .rating_grade, tags: .tags}' >> temp_result.json

        done

        # 写入新文件
        jq -n '{"data": []} + {data: [inputs]}' temp_result.json > result.json
        cp -f result.json ${{ env.WORK_DIR }}/data/
        

    #下载封面
    # - name: Download NeoDB Cover
    #   if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
    #   run: |
    #     # 检查 movie 目录是否存在，如果不存在则创建
    #     if [ ! -d "movie" ]; then
    #       mkdir movie
    #     fi

    #     # 读取本地的 movie.json 文件内容
    #     json=$(cat data/movie.json)

    #     # 提取图片 URL
    #     image_urls=$(echo "$json" | jq -r '.data[].item.cover_image_url')

    #     # 遍历图片 URL 并下载图片
    #     for url in $image_urls; do

    #       filename=$(basename "$url")
    #       filepath="assets/images/neodb/cover/$filename"

    #       # 检查文件是否已存在
    #       if [ -f "$filepath" ]; then
    #         echo "Skipping $filename - File already exists"
    #       else
    #         # 使用 curl 命令下载图片
    #         curl -o "$filepath" "$url"
    #         echo "Downloaded $filename"
    #         echo "REMOTE_UUID=''" >> $GITHUB_ENV
    #       fi
    #     done

    # 把修改后的数据提交到 GitHub 仓库
    - name: Git Add and Commit
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      uses: EndBug/add-and-commit@v9
      with:
        message: 'chore(data): update neodb data'
        committer_name: 'github-actions[bot]'
        committer_email: 'github-actions[bot]@users.noreply.github.com'
        add: |
          './data'
        # './images'
