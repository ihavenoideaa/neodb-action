name: Sync NeoDB Data

on:
#  schedule:
  # every monday
#    - cron: "0 9 * * 1"
  # watch:
  #   types: [started]

  workflow_dispatch:
  repository_dispatch:
    types: [sync-neodb]

jobs:
  douban:
    name: Sync NeoDB Data
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 检查是否安装了 JQ
    - name: Check JQ
      run: |
        if ! command -v jq &> /dev/null; then
          echo "jq is not installed. Installing..."
          sudo apt-get update
          sudo apt-get install -y jq
        else
          echo "jq is already installed."
        fi
        # 把当前目录保存到环境变量中
        echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV

    # 获取本地现有文件中最新的 UUID
    - name: Get Local Current UUID
      run: |
        CURRENT_UUID() {
          jq -r '.data[0].item.uuid' /data/movie.json
        }
        echo "CURRENT_UUID=$(CURRENT_UUID)" >> $GITHUB_ENV

    # 获取远程最新的 UUID
    - name: Get NeoDB Latest UUID and Pages
      run: |
        RESPONSE=$(curl -s -X 'GET' \
          "${{ vars.NEODB_URL }}/api/me/shelf/complete?page=1" \
          -H 'accept: application/json' \
          -H 'Authorization: Bearer ${{ secrets.NEODB_ACCESS_TOKEN }}')

        REMOTE_UUID=$(echo "$RESPONSE" | jq -r '.data[0].item.uuid')
        REMOTE_PAGES=$(echo "$RESPONSE" | jq -r '.pages')

        echo "REMOTE_UUID=$REMOTE_UUID" >> $GITHUB_ENV
        echo "REMOTE_PAGES=$REMOTE_PAGES" >> $GITHUB_ENV

    # 对比本地的 UUID 和远程 UUID，相等就跳过，不相等就下载新数据
    - name: UUID Compare
      run: |
        if [ ${{ env.REMOTE_UUID }} != ${{ env.CURRENT_UUID }} ]; then
          echo "Variables are not equal. Running the next steps."
        else
          echo "Variables are equal. Skipping the next steps."
          exit 0
        fi

     # 备份旧文件并保持最多 10 份备份
    - name: Backup Old Data
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        BACKUP_FILE="${{ env.WORK_DIR }}/data/backup/movie_$TIMESTAMP.json"
        TARGET_FILE="${{ env.WORK_DIR }}/data/movie.json"
        
        if [[ -f "$TARGET_FILE" ]]; then
          cp -f $TARGET_FILE $BACKUP_FILE
          echo "Backed up old data to $BACKUP_FILE"
        else
          echo "There is no old data."
        fi

        # 检查备份文件数量
        BACKUP_COUNT=$(ls -1 ${{ env.WORK_DIR }}/data/backup/movie_*.json 2>/dev/null | wc -l)
        if [ $BACKUP_COUNT -gt ${{ vars.BACKUP_MAX_COUNT }} ]; then

          # 计算需要删除的文件数量
          NUM_TO_DELETE=$((BACKUP_COUNT - ${{ vars.BACKUP_MAX_COUNT }}))

          # 获取最早的备份文件列表
          FILES_TO_DELETE=$(ls -1t ${{ env.WORK_DIR }}/data/backup/movie_*.json | tail -n $NUM_TO_DELETE)
          for file in $FILES_TO_DELETE; do
            rm $file
            echo "Deleted old backup: $file"
          done
        fi

    # 下载所有数据
    - name: Get All NeoDB
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        pages=${{ env.REMOTE_PAGES }}

        # 下载数据
        for ((i=1; i<=$pages; i++)); do
          url="${{ vars.NEODB_URL }}/api/me/shelf/complete?page=$i"
          filename="movie$i.json"

          # 下载文件并保存为对应的文件名
          curl -X 'GET' "$url" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer ${{ secrets.NEODB_ACCESS_TOKEN }}' > "$filename"
        done

        # 把所有数据合并成一个文件
        jq -c -s '{data: map(.data[]) | unique | sort_by(.created_time) | reverse, pages: map(.pages)[0], count: map(.count)[0]}' *.json > movie.json

        # 更新 NeoDB 数据
        cp -f movie.json ${{ env.WORK_DIR }}/data/

    #数据处理
    - name: Install axios
      run: npm install axios@1.8.4

    - name: Get Detail Data
      # if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      id: handel-json
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const fs = require('fs');
          const axios = require('axios');
          const FormData = require('form-data');

          const targetFilePath = "${{ env.WORK_DIR }}/data/movie.json";
          const resultFilePath = "${{ env.WORK_DIR }}/data/result.json";
          let resultData = [];
          try {
            if (fs.existsSync(resultFilePath)) {
              const resultData = fs.readFileSync(resultFilePath, 'utf8');
              resultData = JSON.parse(resultData).data || [];
            }
          } catch (readError) {
            console.error('Error reading result.json:', readError);
          }

          try {
            const data = fs.readFileSync(targetFilePath, 'utf8');
            const json = JSON.parse(data);
            const all_json = {"data": []};
            for (const dataItem of json.data) {
              const isDuplicate = resultData.some(item => item.post_id === dataItem.post_id);
              if (isDuplicate) {
                console.log(`Skipping duplicate item with title: ${dataItem.item.title}`);
                continue;
              }

              // 图片上传图床
              let cover_img_url;
              try {
                const formData = new FormData();
                // 从 URL 下载图片数据
                const imageResponse = await axios.get(dataItem.item.cover_image_url, { responseType: 'stream' });
                formData.append('image', imageResponse.data);
                formData.append('token', "${{ secrets.UPLOAD_IMAGE_TOKEN }}");

                // 发送 POST 请求
                const uploadResponse = await axios.post("${{ secrets.UPLOAD_IMAGE_API }}", formData, {
                  headers: {
                    ...formData.getHeaders()
                  },
                  timeout: 5000
                });
                console.log('Image upload api success:', uploadResponse.data);
                cover_img_url = uploadResponse.data.url;
              } catch (uploadError) {
                console.error('Image upload api error:', uploadError);
                continue;
              }

              const api_url = `${{ vars.NEODB_URL }}${dataItem.item.api_url}`;
              try {
                const response = await axios.get(api_url, { timeout: 5000 });

                // 组成 json
                const oneItem = {
                  post_id: dataItem.post_id,
                  title: dataItem.item.title,
                  type: dataItem.item.type,
                  rating: dataItem.item.rating,
                  url: dataItem.item.url,
                  description: dataItem.item.description,
                  created_time: dataItem.created_time,
                  comment_text: dataItem.comment_text,
                  rating_grade: dataItem.rating_grade,
                  tags: dataItem.tags,
                  year: response.data.year,
                  language: response.data.language,
                  cover: cover_img_url
                };
                resultData.push(oneItem);
              } catch (axiosError) {
                console.error(`Error sending GET request to ${api_url}:`, axiosError);
              }
            }
            resultData.sort((a, b) => new Date(b.created_time) - new Date(a.created_time));

            //core.setOutput('all_json', JSON.stringify(all_json));
            fs.writeFileSync(resultFilePath, JSON.stringify({ data: resultData }));
            console.log(`Data saved to ${resultFilePath}`);
          } catch (error) {
            console.error('Error reading JSON file:', error);
            core.setFailed('Failed to read JSON file');
          }

        
    #下载封面
    - name: Download NeoDB Cover
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      run: |
        # 检查 movie 目录是否存在，如果不存在则创建
        if [ ! -d "images" ]; then
          mkdir images
        fi

        # 读取本地的 movie.json 文件内容
        json=$(cat /data/movie.json)

        # 提取图片 URL
        image_urls=$(echo "$json" | jq -r '.data[].item.cover_image_url')

        # 遍历图片 URL 并下载图片
        for url in $image_urls; do

          filename=$(basename "$url")
          filepath="images/$filename"

          # 检查文件是否已存在
          if [ -f "$filepath" ]; then
            echo "Skipping $filename - File already exists"
          else
            # 使用 curl 命令下载图片
            curl -o "$filepath" "$url"
            echo "Downloaded $filename"
            echo "REMOTE_UUID=''" >> $GITHUB_ENV
          fi
        done

    # 上传

    # 把修改后的数据提交到 GitHub 仓库
    - name: Git Add and Commit
      if: ${{ env.REMOTE_UUID != env.CURRENT_UUID }}
      uses: EndBug/add-and-commit@v9
      with:
        message: 'chore(data): update neodb data'
        committer_name: 'github-actions[bot]'
        committer_email: 'github-actions[bot]@users.noreply.github.com'
        add: |
          './data'
          './images'
